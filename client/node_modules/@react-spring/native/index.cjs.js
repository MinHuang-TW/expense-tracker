'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var reactNative = require('react-native');
var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
var shared = require('@react-spring/shared');
var animated$1 = require('@react-spring/animated/index.cjs.js');
var stringInterpolation = require('@react-spring/shared/stringInterpolation');
var colorNames = _interopDefault(require('@react-spring/shared/colors'));
var core = require('@react-spring/core/index.cjs.js');

var AnimatedTransform =
/*#__PURE__*/
function (_Animated) {
  _inheritsLoose(AnimatedTransform, _Animated);

  function AnimatedTransform(source) {
    var _this;

    _this = _Animated.call(this) || this;
    _this.source = source;
    _this.payload = toPayload(source);
    return _this;
  }

  var _proto = AnimatedTransform.prototype;

  _proto.getValue = function getValue() {
    return this.source.map(function (transform) {
      var obj = {};
      shared.each(transform, function (val, key) {
        obj[key] = animated$1.isAnimated(val) ? val.getValue() : val;
      });
      return obj;
    });
  };

  _proto.updatePayload = function updatePayload(prev, next) {
    var source = [].concat(this.source);
    shared.each(source, function (transform, i) {
      var key = Object.keys(transform)[0];

      if (transform[key] === prev) {
        var _source$i;

        source[i] = (_source$i = {}, _source$i[key] = next, _source$i);
      }
    });
    this.source = source;
    this.payload = toPayload(source);
  };

  _proto._attach = function _attach() {
    var _this2 = this;

    shared.each(this.source, function (transform) {
      return shared.each(transform, animated$1.addChild, _this2);
    });
  };

  _proto._detach = function _detach() {
    var _this3 = this;

    shared.each(this.source, function (transform) {
      return shared.each(transform, animated$1.removeChild, _this3);
    });
  };

  return AnimatedTransform;
}(animated$1.Animated);

function toPayload(source) {
  var payload = new Set();
  shared.each(source, function (transform) {
    return shared.each(transform, function (val) {
      if (animated$1.isAnimated(val)) {
        shared.each(val.getPayload(), function (node) {
          return payload.add(node);
        });
      }
    });
  });
  return payload;
}

var elements = {
  View: reactNative.View,
  Text: reactNative.Text,
  Image: reactNative.Image
};
var animated = animated$1.extendAnimated(animated$1.withAnimated, Object.values(elements));

shared.Globals.assign({
  defaultElement: reactNative.View,
  colorNames: colorNames,
  createStringInterpolator: stringInterpolation.createStringInterpolator,
  applyAnimatedValues: function applyAnimatedValues(instance, props) {
    return instance.setNativeProps ? instance.setNativeProps(props) : false;
  },
  createAnimatedTransform: function createAnimatedTransform(transform) {
    return new AnimatedTransform(transform);
  },
  createAnimatedStyle: function createAnimatedStyle(styles) {
    styles = reactNative.StyleSheet.flatten(styles);

    if (shared.is.obj(styles.shadowOffset)) {
      styles.shadowOffset = new animated$1.AnimatedObject(styles.shadowOffset);
    }

    return new animated$1.AnimatedStyle(styles);
  }
});

Object.keys(core).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return core[k];
    }
  });
});
exports.a = animated;
exports.animated = animated;
//# sourceMappingURL=index.cjs.js.map
