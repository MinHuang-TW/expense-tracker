import { View, Text, Image, StyleSheet } from 'react-native';
import { each, Globals, is } from '@react-spring/shared';
import { Animated, isAnimated, addChild, removeChild, extendAnimated, withAnimated, AnimatedObject, AnimatedStyle } from '@react-spring/animated';
import { createStringInterpolator } from '@react-spring/shared/stringInterpolation';
import colorNames from '@react-spring/shared/colors';
export * from '@react-spring/core';

class AnimatedTransform extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.payload = toPayload(source);
  }

  getValue() {
    return this.source.map(transform => {
      const obj = {};
      each(transform, (val, key) => {
        obj[key] = isAnimated(val) ? val.getValue() : val;
      });
      return obj;
    });
  }

  updatePayload(prev, next) {
    const source = [...this.source];
    each(source, (transform, i) => {
      const key = Object.keys(transform)[0];

      if (transform[key] === prev) {
        source[i] = {
          [key]: next
        };
      }
    });
    this.source = source;
    this.payload = toPayload(source);
  }

  _attach() {
    each(this.source, transform => each(transform, addChild, this));
  }

  _detach() {
    each(this.source, transform => each(transform, removeChild, this));
  }

}

function toPayload(source) {
  const payload = new Set();
  each(source, transform => each(transform, val => {
    if (isAnimated(val)) {
      each(val.getPayload(), node => payload.add(node));
    }
  }));
  return payload;
}

const elements = {
  View,
  Text,
  Image
};
const animated = extendAnimated(withAnimated, Object.values(elements));

Globals.assign({
  defaultElement: View,
  colorNames,
  createStringInterpolator,
  applyAnimatedValues: (instance, props) => instance.setNativeProps ? instance.setNativeProps(props) : false,
  createAnimatedTransform: transform => new AnimatedTransform(transform),

  createAnimatedStyle(styles) {
    styles = StyleSheet.flatten(styles);

    if (is.obj(styles.shadowOffset)) {
      styles.shadowOffset = new AnimatedObject(styles.shadowOffset);
    }

    return new AnimatedStyle(styles);
  }

});

export { animated as a, animated };
//# sourceMappingURL=index.js.map
