{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst BarChart = ({\n  data: originalData,\n  width,\n  height\n}) => {\n  const ref = useRef(null); // const cache = useRef(originalData);\n\n  const colors = ['rgba(255, 255, 255, 1)', 'rgba(255, 255, 255, 0.3)'];\n  useEffect(() => {\n    const data = originalData; // const prevData = createPie(cache.current);\n\n    const labels = data.map(d => d.text);\n    const maxAmount = d3.max(data, d => Math.abs(d.amount));\n    const group = d3.select(ref.current);\n    const scaleY = d3.scaleLinear().domain([0, maxAmount]).range([0, height]);\n    const scaleX = d3.scaleBand().domain(labels).range([0, width]);\n    const xAxis = d3.axisBottom(scaleX); // group.append('g').call(xAxis);\n\n    const groupWithData = group.selectAll('.rect').append('g').attr('class', 'x-axis').select('.x-axis').call(xAxis).style('transform', 'transalteY(100px)').data(data);\n    console.log(groupWithData);\n    groupWithData.exit().remove();\n    const groupWithUpdate = groupWithData.enter().append('g').attr('class', 'rect');\n    const rect = groupWithUpdate.append('rect').merge(groupWithData.select('rect'));\n    rect.attr('width', 6).attr('height', d => scaleY(Math.abs(d.amount))).attr('fill', d => d.amount < 0 ? colors[0] : colors[1]).attr('x', d => scaleX.bandwidth() / 2 - 3 + scaleX(d.text)).attr('y', d => height - scaleY(Math.abs(d.amount))); // eslint-disable-next-line\n  }, [originalData]);\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    ref: ref,\n    style: {\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx"],"names":["React","useEffect","useRef","d3","BarChart","data","originalData","width","height","ref","colors","labels","map","d","text","maxAmount","max","Math","abs","amount","group","select","current","scaleY","scaleLinear","domain","range","scaleX","scaleBand","xAxis","axisBottom","groupWithData","selectAll","append","attr","call","style","console","log","exit","remove","groupWithUpdate","enter","rect","merge","bandwidth","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst BarChart = ({ data : originalData, width, height }) => {\n  const ref = useRef(null);\n  // const cache = useRef(originalData);\n\n  const colors = [\n    'rgba(255, 255, 255, 1)',\n    'rgba(255, 255, 255, 0.3)'\n  ];\n\n  useEffect(() => {\n    const data = originalData;\n    // const prevData = createPie(cache.current);\n    const labels = data.map(d => d.text);\n    const maxAmount = d3.max(data, d => Math.abs(d.amount));\n    const group = d3.select(ref.current);\n\n    const scaleY = d3\n      .scaleLinear()\n      .domain([0, maxAmount])\n      .range([0, height]);\n\n    const scaleX = d3\n      .scaleBand()\n      .domain(labels)\n      .range([0, width]);\n    \n    const xAxis = d3.axisBottom(scaleX);\n    // group.append('g').call(xAxis);\n\n    const groupWithData = group\n      .selectAll('.rect')\n      .append('g')\n      .attr('class', 'x-axis')\n      .select('.x-axis')\n      .call(xAxis)\n      .style('transform', 'transalteY(100px)')\n      .data(data);\n    console.log(groupWithData)\n    groupWithData\n      .exit()\n      .remove();\n    \n    const groupWithUpdate = groupWithData\n      .enter()\n      .append('g')\n      .attr('class', 'rect')\n\n    const rect = groupWithUpdate\n      .append('rect')\n      .merge(groupWithData.select('rect'));\n\n    rect\n      .attr('width', 6)\n      .attr('height', d => scaleY(Math.abs(d.amount)))\n      .attr('fill', d => d.amount < 0 ? colors[0] : colors[1])\n      .attr('x', d => scaleX.bandwidth() / 2 - 3 + scaleX(d.text))\n      .attr('y', d => height - scaleY(Math.abs(d.amount)));\n\n  // eslint-disable-next-line\n  }, [originalData])\n\n  return ( \n    <svg \n      width={width} \n      height={height} \n      ref={ref}\n      style={{ margin: 'auto' }}\n    />\n  );\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}