{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/common/PieChart.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst PieChart = ({\n  data: originalData,\n  width,\n  height,\n  outerRadius,\n  innerRadius\n}) => {\n  const ref = useRef(null);\n  const createPie = d3.pie().value(d => d.value);\n  const createArc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n  const colors = ['rgba(255, 255, 255, 1)', 'rgba(255, 255, 255, 0.3)']; // const format = d3.format('.2f');\n\n  useEffect(() => {\n    const data = createPie(originalData);\n    const group = d3.select(ref.current);\n    const groupWithData = group.selectAll('g.arc').data(data);\n    groupWithData.exit().remove();\n    const groupWithUpdate = groupWithData.enter().append('g').attr('class', 'arc');\n    const path = groupWithUpdate.append('path').merge(groupWithData.select('path.arc'));\n    path.attr('class', 'arc').attr('d', createArc).attr('fill', (d, i) => colors[i]); // const text = groupWithUpdate\n    // .append(\"text\")\n    // .merge(groupWithData.select(\"text\"));\n    // text\n    //   .attr(\"text-anchor\", \"middle\")\n    //   .attr(\"alignment-baseline\", \"middle\")\n    //   .attr(\"transform\", d => `translate(${createArc.centroid(d)})`)\n    //   .style(\"fill\", \"white\")\n    //   .style(\"font-size\", 10)\n    //   .text(d => format(d.value));\n  }, [originalData]);\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: ref,\n    transform: `translate(${outerRadius} ${outerRadius})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n};\n\nexport default PieChart;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/common/PieChart.jsx"],"names":["React","useEffect","useRef","d3","PieChart","data","originalData","width","height","outerRadius","innerRadius","ref","createPie","pie","value","d","createArc","arc","colors","group","select","current","groupWithData","selectAll","exit","remove","groupWithUpdate","enter","append","attr","path","merge","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAGC,YAAT;AAAuBC,EAAAA,KAAvB;AAA8BC,EAAAA,MAA9B;AAAsCC,EAAAA,WAAtC;AAAmDC,EAAAA;AAAnD,CAAD,KAAsE;AACrF,QAAMC,GAAG,GAAGT,MAAM,CAAC,IAAD,CAAlB;AAGA,QAAMU,SAAS,GAAGT,EAAE,CACjBU,GADe,GAEfC,KAFe,CAETC,CAAC,IAAIA,CAAC,CAACD,KAFE,CAAlB;AAIE,QAAME,SAAS,GAAGb,EAAE,CACjBc,GADe,GAEfP,WAFe,CAEHA,WAFG,EAGfD,WAHe,CAGHA,WAHG,CAAlB;AAKA,QAAMS,MAAM,GAAG,CAAC,wBAAD,EAA2B,0BAA3B,CAAf,CAbmF,CAcnF;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMI,IAAI,GAAGO,SAAS,CAACN,YAAD,CAAtB;AACA,UAAMa,KAAK,GAAGhB,EAAE,CAACiB,MAAH,CAAUT,GAAG,CAACU,OAAd,CAAd;AACA,UAAMC,aAAa,GAAGH,KAAK,CAACI,SAAN,CAAgB,OAAhB,EAAyBlB,IAAzB,CAA8BA,IAA9B,CAAtB;AAEAiB,IAAAA,aAAa,CAACE,IAAd,GAAqBC,MAArB;AAEA,UAAMC,eAAe,GAAGJ,aAAa,CAClCK,KADqB,GAErBC,MAFqB,CAEd,GAFc,EAGrBC,IAHqB,CAGhB,OAHgB,EAGP,KAHO,CAAxB;AAKA,UAAMC,IAAI,GAAGJ,eAAe,CACzBE,MADU,CACH,MADG,EAEVG,KAFU,CAEJT,aAAa,CAACF,MAAd,CAAqB,UAArB,CAFI,CAAb;AAIAU,IAAAA,IAAI,CACDD,IADH,CACQ,OADR,EACiB,KADjB,EAEGA,IAFH,CAEQ,GAFR,EAEab,SAFb,EAGGa,IAHH,CAGQ,MAHR,EAGgB,CAACd,CAAD,EAAIiB,CAAJ,KAAUd,MAAM,CAACc,CAAD,CAHhC,EAhBc,CAqBZ;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAhCQ,EAgCN,CAAC1B,YAAD,CAhCM,CAAT;AAiCF,SACE;AAAK,IAAA,KAAK,EAAEC,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,GAAG,EAAEG,GAAR;AAAa,IAAA,SAAS,EAAG,aAAYF,WAAY,IAAGA,WAAY,GAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAtDD;;AAwDA,eAAeL,QAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst PieChart = ({ data : originalData, width, height, outerRadius, innerRadius }) => {\n  const ref = useRef(null);\n  \n\n  const createPie = d3\n    .pie()\n    .value(d => d.value)\n  \n    const createArc = d3\n      .arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius);\n\n    const colors = ['rgba(255, 255, 255, 1)', 'rgba(255, 255, 255, 0.3)'];\n    // const format = d3.format('.2f');\n\n    useEffect(() => {\n      const data = createPie(originalData);\n      const group = d3.select(ref.current);\n      const groupWithData = group.selectAll('g.arc').data(data);\n\n      groupWithData.exit().remove();\n\n      const groupWithUpdate = groupWithData\n        .enter()\n        .append('g')\n        .attr('class', 'arc');\n\n      const path = groupWithUpdate\n        .append('path')\n        .merge(groupWithData.select('path.arc'));\n\n      path\n        .attr('class', 'arc')\n        .attr('d', createArc)\n        .attr('fill', (d, i) => colors[i]);\n\n        // const text = groupWithUpdate\n        // .append(\"text\")\n        // .merge(groupWithData.select(\"text\"));\n\n      // text\n      //   .attr(\"text-anchor\", \"middle\")\n      //   .attr(\"alignment-baseline\", \"middle\")\n      //   .attr(\"transform\", d => `translate(${createArc.centroid(d)})`)\n      //   .style(\"fill\", \"white\")\n      //   .style(\"font-size\", 10)\n      //   .text(d => format(d.value));\n    }, [originalData])\n  return ( \n    <svg width={width} height={height}>\n      <g ref={ref} transform={`translate(${outerRadius} ${outerRadius})`} />\n    </svg>\n  );\n}\n\nexport default PieChart;"]},"metadata":{},"sourceType":"module"}