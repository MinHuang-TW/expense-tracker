{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/TransactionList.jsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { sortAmountDsc, sortAmountAsc, dbDateArr, newDateArr } from '../utils/format';\nimport TransactionFilter from './common/TransactionFilter';\nimport Transaction from './Transaction';\nimport { Button, ButtonGroup, CircularProgress, Typography } from '@material-ui/core';\n\nconst TransactionList = () => {\n  const {\n    loading,\n    transactions,\n    getTransactions\n  } = useContext(GlobalContext);\n  const [selected, setSelected] = useState('all');\n  const [sortDsc, setSortDsc] = useState(true);\n  const date = newDateArr(new Date());\n  let counter = 0;\n  useEffect(() => {\n    getTransactions(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(TransactionFilter, {\n    value: 0,\n    sortDsc: sortDsc,\n    handleSortAmount: () => setSortDsc(!sortDsc),\n    text: \"today's transaction\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), transactions.length > 0 ? React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, transactions.filter(transaction => {\n    const data = dbDateArr(transaction.date);\n    console.log({\n      'db': data\n    });\n    console.log({\n      'today': date\n    });\n    return data[1] === date[1] && data[0] === date[0];\n  }).sort((a, b) => sortDsc ? sortAmountDsc(a, b) : sortAmountAsc(a, b)).map(transaction => {\n    counter++;\n    return React.createElement(Transaction, {\n      key: transaction._id,\n      transaction: transaction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }), counter === 0 && React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"No transaction\")) : React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, loading ? React.createElement(CircularProgress, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }) : 'No transaction'));\n};\n\nexport default TransactionList;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/TransactionList.jsx"],"names":["React","useState","useContext","useEffect","GlobalContext","sortAmountDsc","sortAmountAsc","dbDateArr","newDateArr","TransactionFilter","Transaction","Button","ButtonGroup","CircularProgress","Typography","TransactionList","loading","transactions","getTransactions","selected","setSelected","sortDsc","setSortDsc","date","Date","counter","length","filter","transaction","data","console","log","sort","a","b","map","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDC,UAAlD,QAAoE,iBAApE;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,gBAA9B,EAAgDC,UAAhD,QAAkE,mBAAlE;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAA6ChB,UAAU,CAACE,aAAD,CAA7D;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAMsB,IAAI,GAAGf,UAAU,CAAC,IAAIgB,IAAJ,EAAD,CAAvB;AACA,MAAIC,OAAO,GAAG,CAAd;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,eAAe,GADD,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CADT;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,gBAAgB,EAAE,MAAMC,UAAU,CAAC,CAACD,OAAF,CAHpC;AAIE,IAAA,IAAI,EAAC,qBAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQGJ,YAAY,CAACS,MAAb,GAAsB,CAAtB,GACC;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,YAAY,CACVU,MADF,CACSC,WAAW,IAAI;AACnB,UAAMC,IAAI,GAAGtB,SAAS,CAACqB,WAAW,CAACL,IAAb,CAAtB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAC,YAAMF;AAAP,KAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAC,eAASR;AAAV,KAAZ;AACA,WAAOM,IAAI,CAAC,CAAD,CAAJ,KAAYN,IAAI,CAAC,CAAD,CAAhB,IAAuBM,IAAI,CAAC,CAAD,CAAJ,KAAYN,IAAI,CAAC,CAAD,CAA9C;AACD,GANJ,EAOES,IAPF,CAOO,CAACC,CAAD,EAAIC,CAAJ,KAAUb,OAAO,GAAGhB,aAAa,CAAC4B,CAAD,EAAIC,CAAJ,CAAhB,GAAyB5B,aAAa,CAAC2B,CAAD,EAAIC,CAAJ,CAP9D,EAQEC,GARF,CAQMP,WAAW,IAAI;AAClBH,IAAAA,OAAO;AACP,WACE,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEG,WAAW,CAACQ,GAA9B;AAAmC,MAAA,WAAW,EAAER,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAbF,CADH,EAeGH,OAAO,KAAK,CAAZ,IACC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhBJ,CADD,GAqBC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,OAAO,GACJ,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADI,GAEJ,gBAHN,CA7BJ,CADF;AAsCD,CAnDD;;AAqDA,eAAeD,eAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { sortAmountDsc, sortAmountAsc, dbDateArr, newDateArr } from '../utils/format';\nimport TransactionFilter from './common/TransactionFilter';\nimport Transaction from './Transaction';\nimport { Button, ButtonGroup, CircularProgress, Typography } from '@material-ui/core';\n\nconst TransactionList = () => {\n  const { loading, transactions, getTransactions } = useContext(GlobalContext);\n  const [selected, setSelected] = useState('all');\n  const [sortDsc, setSortDsc] = useState(true);\n\n  const date = newDateArr(new Date());\n  let counter = 0;\n\n  useEffect(() => {\n    getTransactions();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className='container'>\n      <TransactionFilter \n        value={0} \n        sortDsc={sortDsc} \n        handleSortAmount={() => setSortDsc(!sortDsc)}\n        text=\"today's transaction\"\n      />\n\n      {transactions.length > 0 ? (\n        <ul className='list'>\n          {transactions\n            .filter(transaction => {\n                const data = dbDateArr(transaction.date);\n                console.log({'db': data})\n                console.log({'today': date})\n                return data[1] === date[1] && data[0] === date[0];\n              })\n            .sort((a, b) => sortDsc ? sortAmountDsc(a, b) : sortAmountAsc(a, b))\n            .map(transaction => {\n              counter++;\n              return (\n                <Transaction key={transaction._id} transaction={transaction} />\n              );\n            })}\n          {counter === 0 && (\n            <div className='list-status'>No transaction</div>\n          )}\n        </ul>\n      ) : (\n        <div className='list-status'>\n          {loading \n            ? <CircularProgress color='primary'/>\n            : 'No transaction'}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TransactionList;\n"]},"metadata":{},"sourceType":"module"}