{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/Dashboard.jsx\";\nimport React, { Fragment, useState, useContext, useEffect, useCallback } from 'react';\nimport { useTransition, animated } from 'react-spring';\nimport { GlobalContext } from '../context/GlobalState';\nimport { checkWeek, sortAmountDsc, sortAmountAsc, sortDateDsc, sortDateAsc } from '../utils/calculation';\nimport Total from './common/Total';\nimport IncomExpenses from './common/IncomeExpenses';\nimport Filter from './common/Filter';\nimport Transaction from './common/Transaction';\nimport { CircularProgress } from '@material-ui/core'; // import TransactionList from './TransactionList';\n\nconst TransactionList = () => {\n  const {\n    loading,\n    transactions,\n    getTransactions\n  } = useContext(GlobalContext);\n  const lists = transactions.filter(transaction => checkWeek(transaction.date)).sort((a, b) => {\n    if (sortColumn === 'date') {\n      return sortLatest ? sortDateDsc(a, b) : sortDateAsc(a, b);\n    }\n\n    return sortDsc ? sortAmountDsc(a.amount, b.amount) : sortAmountAsc(a.amount, b.amount);\n  });\n  const transition = useTransition(lists, list => list._id, {\n    from: {\n      height: 86,\n      transform: 'translate3d(-5%,0,0)',\n      opacity: 0\n    },\n    enter: {\n      height: 86,\n      transform: 'translate3d(0%,0,0)',\n      opacity: 1\n    },\n    leave: {\n      height: 0,\n      transform: 'translate3d(-300%,0,0)',\n      opacity: 0\n    },\n    trail: 200\n  });\n  const handleSortDate = useCallback(() => {\n    setSortLatest(!sortLatest);\n    setSortColum('date');\n  }, [sortLatest]);\n  const handleSortAmount = useCallback(() => {\n    setSortDsc(!sortDsc);\n    setSortColum('amount');\n  }, [sortDsc]);\n  useEffect(() => {\n    getTransactions(); // eslint-disable-next-line\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Filter, {\n    sortLatest: sortLatest,\n    sortDsc: sortDsc,\n    handleSortDate: handleSortDate,\n    handleSortAmount: handleSortAmount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), lists.length > 0 ? React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, transition.map(({\n    item,\n    props,\n    key\n  }) => React.createElement(animated.div, {\n    key: key,\n    style: props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Transaction, {\n    transaction: item,\n    date: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })))) : React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, loading ? React.createElement(CircularProgress, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"No recent transactions\")));\n};\n\nconst Dashboard = () => {\n  const {\n    transactions\n  } = useContext(GlobalContext);\n  const amounts = transactions.map(transaction => transaction.amount);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Total, {\n    amounts: amounts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"inc-exp-container\",\n    style: {\n      marginBottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(IncomExpenses, {\n    amounts: amounts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }))), React.createElement(TransactionList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/Dashboard.jsx"],"names":["React","Fragment","useState","useContext","useEffect","useCallback","useTransition","animated","GlobalContext","checkWeek","sortAmountDsc","sortAmountAsc","sortDateDsc","sortDateAsc","Total","IncomExpenses","Filter","Transaction","CircularProgress","TransactionList","loading","transactions","getTransactions","lists","filter","transaction","date","sort","a","b","sortColumn","sortLatest","sortDsc","amount","transition","list","_id","from","height","transform","opacity","enter","leave","trail","handleSortDate","setSortLatest","setSortColum","handleSortAmount","setSortDsc","length","map","item","props","key","Dashboard","amounts","marginBottom"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useContext, useEffect, useCallback } from 'react';\nimport { useTransition, animated } from 'react-spring';\nimport { GlobalContext } from '../context/GlobalState';\nimport { checkWeek, sortAmountDsc, sortAmountAsc, sortDateDsc, sortDateAsc } from '../utils/calculation';\nimport Total from './common/Total';\nimport IncomExpenses from './common/IncomeExpenses';\nimport Filter from './common/Filter';\nimport Transaction from './common/Transaction';\nimport { CircularProgress } from '@material-ui/core';\n// import TransactionList from './TransactionList';\n\nconst TransactionList = () => {\n  const { loading, transactions, getTransactions } = useContext(GlobalContext);\n\n  const lists = transactions\n    .filter((transaction) => checkWeek(transaction.date))\n    .sort((a, b) => {\n      if (sortColumn === 'date') {\n        return sortLatest \n          ? sortDateDsc(a, b) \n          : sortDateAsc(a, b);\n      }\n      return sortDsc \n        ? sortAmountDsc(a.amount, b.amount) \n        : sortAmountAsc(a.amount, b.amount);\n    });\n\n  const transition = useTransition(lists, (list) => list._id, {\n    from: { height: 86, transform: 'translate3d(-5%,0,0)', opacity: 0 },\n    enter: { height: 86, transform: 'translate3d(0%,0,0)', opacity: 1 },\n    leave: { height: 0, transform: 'translate3d(-300%,0,0)', opacity: 0 },\n    trail: 200,\n  });\n\n  const handleSortDate = useCallback(() => {\n    setSortLatest(!sortLatest); \n    setSortColum('date');\n  }, [sortLatest]);\n\n  const handleSortAmount = useCallback(() => {\n    setSortDsc(!sortDsc);\n    setSortColum('amount');\n  }, [sortDsc]);\n\n  useEffect(() => {\n    getTransactions();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className='container'>\n      <Filter\n        sortLatest={sortLatest}\n        sortDsc={sortDsc}\n        handleSortDate={handleSortDate}\n        handleSortAmount={handleSortAmount}\n      />\n\n      {lists.length > 0 ? (\n        <ul className='list'>\n          {transition.map(({ item, props, key }) => (\n            <animated.div key={key} style={props}>\n              <Transaction transaction={item} date />\n            </animated.div>\n          ))}\n        </ul>\n      ) : (\n        <div className='list-status'>\n          {loading \n            ? (<CircularProgress color='primary' />) \n            : (<p>No recent transactions</p>)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst Dashboard = () => {\n  const { transactions } = useContext(GlobalContext);\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  return ( \n    <Fragment>\n      <div className=\"container-top\">\n        <Total amounts={amounts} />\n        <div className=\"inc-exp-container\" style={{ marginBottom: 0 }}>\n          <IncomExpenses amounts={amounts} />\n        </div>\n      </div>\n      <TransactionList />\n    </Fragment>\n  );\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}