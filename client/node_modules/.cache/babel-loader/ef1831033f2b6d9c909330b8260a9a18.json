{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst BarChart = ({\n  data: originalData,\n  width,\n  height\n}) => {\n  const ref = useRef(null); // const cache = useRef(originalData);\n\n  const colors = ['rgba(255, 255, 255, 1)', 'rgba(255, 255, 255, 0.3)'];\n  useEffect(() => {\n    const data = originalData.map(d => Math.abs(d.amount));\n    const labels = originalData.map(d => d.text); // const prevData = createPie(cache.current);\n\n    const group = d3.select(ref.current);\n    const scaleY = d3.scaleLinear().domain([0, Math.max(...data)]).range([0, height]);\n    const scaleX = d3.scaleBand().domain(labels).range([0, width]);\n    const groupWithData = group.selectAll('g.rect').data(data);\n    groupWithData.exit().remove();\n    const groupWithUpdate = groupWithData.enter().append('rect').attr('width', 6).attr('height', d => scaleY(d)).attr('fill', d => colors[0]).attr('x', (d, i) => i * 18).attr('y', d => height - scaleY(d)); // eslint-disable-next-line\n  }, [originalData]);\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: ref // transform={`translate(${width / 2} ${height / 2})`} \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx"],"names":["React","useEffect","useRef","d3","BarChart","data","originalData","width","height","ref","colors","map","d","Math","abs","amount","labels","text","group","select","current","scaleY","scaleLinear","domain","max","range","scaleX","scaleBand","groupWithData","selectAll","exit","remove","groupWithUpdate","enter","append","attr","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAGC,YAAT;AAAuBC,EAAAA,KAAvB;AAA8BC,EAAAA;AAA9B,CAAD,KAA4C;AAC3D,QAAMC,GAAG,GAAGP,MAAM,CAAC,IAAD,CAAlB,CAD2D,CAE3D;;AAEA,QAAMQ,MAAM,GAAG,CACb,wBADa,EAEb,0BAFa,CAAf;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMI,IAAI,GAAGC,YAAY,CAACK,GAAb,CAAiBC,CAAC,IAAIC,IAAI,CAACC,GAAL,CAASF,CAAC,CAACG,MAAX,CAAtB,CAAb;AACA,UAAMC,MAAM,GAAGV,YAAY,CAACK,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAACK,IAAxB,CAAf,CAFc,CAGd;;AACA,UAAMC,KAAK,GAAGf,EAAE,CAACgB,MAAH,CAAUV,GAAG,CAACW,OAAd,CAAd;AAEA,UAAMC,MAAM,GAAGlB,EAAE,CACdmB,WADY,GAEZC,MAFY,CAEL,CAAC,CAAD,EAAIV,IAAI,CAACW,GAAL,CAAS,GAAGnB,IAAZ,CAAJ,CAFK,EAGZoB,KAHY,CAGN,CAAC,CAAD,EAAIjB,MAAJ,CAHM,CAAf;AAKA,UAAMkB,MAAM,GAAGvB,EAAE,CACdwB,SADY,GAEZJ,MAFY,CAELP,MAFK,EAGZS,KAHY,CAGN,CAAC,CAAD,EAAIlB,KAAJ,CAHM,CAAf;AAKA,UAAMqB,aAAa,GAAGV,KAAK,CAACW,SAAN,CAAgB,QAAhB,EAA0BxB,IAA1B,CAA+BA,IAA/B,CAAtB;AAEAuB,IAAAA,aAAa,CAACE,IAAd,GAAqBC,MAArB;AAEA,UAAMC,eAAe,GAAGJ,aAAa,CAClCK,KADqB,GAErBC,MAFqB,CAEd,MAFc,EAGrBC,IAHqB,CAGhB,OAHgB,EAGP,CAHO,EAIrBA,IAJqB,CAIhB,QAJgB,EAINvB,CAAC,IAAIS,MAAM,CAACT,CAAD,CAJL,EAKrBuB,IALqB,CAKhB,MALgB,EAKRvB,CAAC,IAAIF,MAAM,CAAC,CAAD,CALH,EAMrByB,IANqB,CAMhB,GANgB,EAMX,CAACvB,CAAD,EAAIwB,CAAJ,KAAUA,CAAC,GAAG,EANH,EAOrBD,IAPqB,CAOhB,GAPgB,EAOXvB,CAAC,IAAIJ,MAAM,GAAGa,MAAM,CAACT,CAAD,CAPT,CAAxB,CApBc,CA6BhB;AACC,GA9BQ,EA8BN,CAACN,YAAD,CA9BM,CAAT;AAgCA,SACE;AAAK,IAAA,KAAK,EAAEC,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEC,GADP,CAEE;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CAjDD;;AAmDA,eAAeL,QAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst BarChart = ({ data : originalData, width, height }) => {\n  const ref = useRef(null);\n  // const cache = useRef(originalData);\n\n  const colors = [\n    'rgba(255, 255, 255, 1)',\n    'rgba(255, 255, 255, 0.3)'\n  ];\n\n  useEffect(() => {\n    const data = originalData.map(d => Math.abs(d.amount));\n    const labels = originalData.map(d => d.text);\n    // const prevData = createPie(cache.current);\n    const group = d3.select(ref.current);\n\n    const scaleY = d3\n      .scaleLinear()\n      .domain([0, Math.max(...data)])\n      .range([0, height])\n\n    const scaleX = d3\n      .scaleBand()\n      .domain(labels)\n      .range([0, width])\n\n    const groupWithData = group.selectAll('g.rect').data(data);\n\n    groupWithData.exit().remove();\n\n    const groupWithUpdate = groupWithData\n      .enter()\n      .append('rect')\n      .attr('width', 6)\n      .attr('height', d => scaleY(d))\n      .attr('fill', d => colors[0])\n      .attr('x', (d, i) => i * 18)\n      .attr('y', d => height - scaleY(d));\n\n  // eslint-disable-next-line\n  }, [originalData])\n\n  return ( \n    <svg width={width} height={height}>\n      <g \n        ref={ref} \n        // transform={`translate(${width / 2} ${height / 2})`} \n      />\n    </svg>\n  );\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}