{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useState } from 'react';\n\nconst BarChart = ({\n  data: originalData,\n  width,\n  height\n}) => {\n  const ref = useRef(null); // const cache = useRef(originalData);\n\n  const colors = ['rgba(255, 255, 255, 1)', 'rgba(255, 255, 255, 0.3)'];\n  useEffect(() => {\n    const data = originalData; // const prevData = createPie(cache.current);\n\n    const group = d3.select(ref.current);\n    const labels = data.map(d => d.text);\n    const maxAmount = d3.max(data, d => Math.abs(d.amount));\n    const yScale = d3.scaleLinear().domain([0, maxAmount]).range([0, height]);\n    const xScale = d3.scaleBand().domain(labels).range([0, width]);\n    const xAxis = axisBottom(xScale);\n    group.select('.x-axis') // .style('transform', 'translate(150px)')\n    .call(xAxis);\n    group.selectAll('.bar').data(data).join('rect').attr('class', 'bar').attr('x', d => xScale.bandwidth() / 2 - 3 + xScale(d.text)).attr('y', d => height - yScale(Math.abs(d.amount))).attr('width', 6).attr('height', d => yScale(Math.abs(d.amount))).attr('fill', d => d.amount < 0 ? colors[0] : colors[1]); //#region \n    // const groupWithData = group\n    //   .selectAll('.rect')\n    //   .data(data);\n    // console.log(groupWithData)\n    // groupWithData\n    //   .exit()\n    //   .remove();\n    // const groupWithUpdate = groupWithData\n    //   .enter()\n    //   .append('g')\n    //   .attr('class', 'rect')\n    // const rect = groupWithUpdate\n    //   .append('rect')\n    //   .merge(groupWithData.select('rect'));\n    // rect\n    //   .attr('width', 6)\n    //   .attr('height', d => yScale(Math.abs(d.amount)))\n    //   .attr('fill', d => d.amount < 0 ? colors[0] : colors[1])\n    //   .attr('x', d => xScale.bandwidth() / 2 - 3 + xScale(d.text))\n    //   .attr('y', d => height - yScale(Math.abs(d.amount)));\n    //#endregion\n    // eslint-disable-next-line\n  }, [originalData]);\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    ref: ref,\n    style: {\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx"],"names":["React","useEffect","useRef","d3","useState","BarChart","data","originalData","width","height","ref","colors","group","select","current","labels","map","d","text","maxAmount","max","Math","abs","amount","yScale","scaleLinear","domain","range","xScale","scaleBand","xAxis","axisBottom","call","selectAll","join","attr","bandwidth","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAGC,YAAT;AAAuBC,EAAAA,KAAvB;AAA8BC,EAAAA;AAA9B,CAAD,KAA4C;AAC3D,QAAMC,GAAG,GAAGR,MAAM,CAAC,IAAD,CAAlB,CAD2D,CAE3D;;AAEA,QAAMS,MAAM,GAAG,CACb,wBADa,EAEb,0BAFa,CAAf;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,IAAI,GAAGC,YAAb,CADc,CAEd;;AACA,UAAMK,KAAK,GAAGT,EAAE,CAACU,MAAH,CAAUH,GAAG,CAACI,OAAd,CAAd;AAEA,UAAMC,MAAM,GAAGT,IAAI,CAACU,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,IAAhB,CAAf;AACA,UAAMC,SAAS,GAAGhB,EAAE,CAACiB,GAAH,CAAOd,IAAP,EAAaW,CAAC,IAAII,IAAI,CAACC,GAAL,CAASL,CAAC,CAACM,MAAX,CAAlB,CAAlB;AAEA,UAAMC,MAAM,GAAGrB,EAAE,CACdsB,WADY,GAEZC,MAFY,CAEL,CAAC,CAAD,EAAIP,SAAJ,CAFK,EAGZQ,KAHY,CAGN,CAAC,CAAD,EAAIlB,MAAJ,CAHM,CAAf;AAKA,UAAMmB,MAAM,GAAGzB,EAAE,CACd0B,SADY,GAEZH,MAFY,CAELX,MAFK,EAGZY,KAHY,CAGN,CAAC,CAAD,EAAInB,KAAJ,CAHM,CAAf;AAKA,UAAMsB,KAAK,GAAGC,UAAU,CAACH,MAAD,CAAxB;AAEAhB,IAAAA,KAAK,CACFC,MADH,CACU,SADV,EAEE;AAFF,KAGGmB,IAHH,CAGQF,KAHR;AAKAlB,IAAAA,KAAK,CACFqB,SADH,CACa,MADb,EAEG3B,IAFH,CAEQA,IAFR,EAGG4B,IAHH,CAGQ,MAHR,EAIGC,IAJH,CAIQ,OAJR,EAIiB,KAJjB,EAKGA,IALH,CAKQ,GALR,EAKalB,CAAC,IAAIW,MAAM,CAACQ,SAAP,KAAqB,CAArB,GAAyB,CAAzB,GAA6BR,MAAM,CAACX,CAAC,CAACC,IAAH,CALrD,EAMGiB,IANH,CAMQ,GANR,EAMalB,CAAC,IAAIR,MAAM,GAAGe,MAAM,CAACH,IAAI,CAACC,GAAL,CAASL,CAAC,CAACM,MAAX,CAAD,CANjC,EAOGY,IAPH,CAOQ,OAPR,EAOiB,CAPjB,EAQGA,IARH,CAQQ,QARR,EAQkBlB,CAAC,IAAIO,MAAM,CAACH,IAAI,CAACC,GAAL,CAASL,CAAC,CAACM,MAAX,CAAD,CAR7B,EASGY,IATH,CASQ,MATR,EASgBlB,CAAC,IAAIA,CAAC,CAACM,MAAF,GAAW,CAAX,GAAeZ,MAAM,CAAC,CAAD,CAArB,GAA2BA,MAAM,CAAC,CAAD,CATtD,EAzBc,CAqCd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACC,GAhEQ,EAgEN,CAACJ,YAAD,CAhEM,CAAT;AAkEA,SACE;AACE,IAAA,KAAK,EAAEC,KADT;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,KAAK,EAAE;AAAE2B,MAAAA,MAAM,EAAE;AAAV,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAnFD;;AAqFA,eAAehC,QAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useState } from 'react';\n\nconst BarChart = ({ data : originalData, width, height }) => {\n  const ref = useRef(null);\n  // const cache = useRef(originalData);\n\n  const colors = [\n    'rgba(255, 255, 255, 1)',\n    'rgba(255, 255, 255, 0.3)'\n  ];\n\n  useEffect(() => {\n    const data = originalData;\n    // const prevData = createPie(cache.current);\n    const group = d3.select(ref.current);\n    \n    const labels = data.map(d => d.text);\n    const maxAmount = d3.max(data, d => Math.abs(d.amount));\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, maxAmount])\n      .range([0, height]);\n\n    const xScale = d3\n      .scaleBand()\n      .domain(labels)\n      .range([0, width]);\n    \n    const xAxis = axisBottom(xScale);\n\n    group\n      .select('.x-axis')\n      // .style('transform', 'translate(150px)')\n      .call(xAxis);\n\n    group\n      .selectAll('.bar')\n      .data(data)\n      .join('rect')\n      .attr('class', 'bar')\n      .attr('x', d => xScale.bandwidth() / 2 - 3 + xScale(d.text))\n      .attr('y', d => height - yScale(Math.abs(d.amount)))\n      .attr('width', 6)\n      .attr('height', d => yScale(Math.abs(d.amount)))\n      .attr('fill', d => d.amount < 0 ? colors[0] : colors[1]);\n\n\n    //#region \n    // const groupWithData = group\n    //   .selectAll('.rect')\n    //   .data(data);\n    // console.log(groupWithData)\n    // groupWithData\n    //   .exit()\n    //   .remove();\n    \n    // const groupWithUpdate = groupWithData\n    //   .enter()\n    //   .append('g')\n    //   .attr('class', 'rect')\n\n    // const rect = groupWithUpdate\n    //   .append('rect')\n    //   .merge(groupWithData.select('rect'));\n\n    // rect\n    //   .attr('width', 6)\n    //   .attr('height', d => yScale(Math.abs(d.amount)))\n    //   .attr('fill', d => d.amount < 0 ? colors[0] : colors[1])\n    //   .attr('x', d => xScale.bandwidth() / 2 - 3 + xScale(d.text))\n    //   .attr('y', d => height - yScale(Math.abs(d.amount)));\n    //#endregion\n\n  // eslint-disable-next-line\n  }, [originalData])\n\n  return ( \n    <svg \n      width={width} \n      height={height} \n      ref={ref}\n      style={{ margin: 'auto' }}\n    />\n  );\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}