{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx\";\nimport React, { Fragment, useState, useEffect, useContext } from 'react'; // import { useTransition, animated } from 'react-spring';\n\nimport moment from 'moment';\nimport { v4 as id } from 'uuid';\nimport { GlobalContext } from '../context/GlobalState';\nimport { sortAmountAsc } from '../utils/calculation';\nimport Transaction from './common/Transaction';\nimport BarChart from '../components/common/BarChart';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const {\n    loading,\n    transactions,\n    getTransactions\n  } = useContext(GlobalContext);\n  const [value, setValue] = useState(0);\n  const today = moment();\n  const timeFilters = ['week', 'month', 'year'];\n  const allKeys = ['income', 'expense'];\n  const [combinedLists, setCombinedLists] = useState([]);\n\n  const filterDate = time => {\n    return transactions.filter(transaction => moment(transaction.date).isSame(today, time));\n  };\n\n  const sumAmount = (time, filter, order) => {\n    return Object.values(filterDate(time).reduce((result, {\n      date,\n      amount\n    }) => {\n      const index = date => moment(date).format(order);\n\n      const format = date => moment(date).format(filter);\n\n      !result[format(date)] ? result[format(date)] = {\n        id: id(),\n        index: +index(date),\n        text: format(date),\n        income: amount > 0 ? amount : 0,\n        expense: amount < 0 ? amount : 0\n      } : amount > 0 ? result[format(date)].income += amount : result[format(date)].expense += amount;\n      return result;\n    }, {}));\n  }; // eslint-disable-next-line\n  // switch (value) {\n  //   case 0:\n  //     setCombinedLists(sumAmount('week', 'dddd', 'e'));\n  //     break;\n  //   case 1:\n  //     setCombinedLists(sumAmount('month', 'w', 'w'));\n  //     // combinedLists.forEach(list => (list['text'] = 'Week ' + list['text']));\n  //     break;\n  //   case 2:\n  //     setCombinedLists(sumAmount('year', 'MMMM', 'MM'));\n  //     break;\n  // }\n\n\n  console.log(combinedLists); // const lists = combinedLists.sort((a, b) => sortAmountAsc(a.index, b.index));\n  // console.log(lists)\n  // const transition = useTransition(lists, list => list.id, {\n  //   from: { height: 75, transform: 'translate3d(-5%,0,0)', opacity: 0 },\n  //   enter: { height: 75, transform: 'translate3d(0%,0,0)', opacity: 1 },\n  //   leave: { height: 0, transform: 'translate3d(-5%,0,0)', opacity: 0 },\n  // });\n\n  useEffect(() => {\n    getTransactions(); // eslint-disable-next-line\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"plus-bg time-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Tabs, {\n    value: value,\n    variant: \"fullWidth\",\n    \"aria-label\": \"time selectors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, timeFilters.map((timeFilter, index) => React.createElement(Tab, {\n    key: timeFilter,\n    label: timeFilter,\n    onClick: () => {\n      setValue(index);\n      setCombinedLists(index === 0 ? sumAmount('week', 'dddd', 'e') : index === 1 ? sumAmount('month', 'w', 'w') : sumAmount('year', 'MMMM', 'MM'));\n    },\n    disableFocusRipple: true,\n    disableRipple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"plus-bg box\",\n    style: {\n      height: '250px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"box-incomeExpense\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, combinedLists.length > 0 ? React.createElement(BarChart, {\n    data: combinedLists,\n    keys: allKeys,\n    select: value,\n    height: \"180\",\n    width: window.innerWidth > 320 ? 350 : 288,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }) : React.createElement(\"p\", {\n    className: \"text-white-s vertical-align\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"No transaction\"))), React.createElement(\"div\", {\n    className: \"container\",\n    style: {\n      marginTop: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, combinedLists.length > 0 ? React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, combinedLists.sort((a, b) => sortAmountAsc(a.index, b.index)).map(list => React.createElement(Transaction, {\n    key: list.id,\n    transaction: list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }))) // <ul className='list'>\n  //   {transition.map(({ item, props, key }) => (\n  //     <animated.div key={key} style={props}>\n  //       <Transaction transaction={item} />\n  //     </animated.div>\n  //   ))}\n  // </ul>\n  : React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, loading ? React.createElement(CircularProgress, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"No transaction of the \", timeFilters[value]))));\n};\n\nexport default Statistics;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx"],"names":["React","Fragment","useState","useEffect","useContext","moment","v4","id","GlobalContext","sortAmountAsc","Transaction","BarChart","Tabs","Tab","CircularProgress","Statistics","loading","transactions","getTransactions","value","setValue","today","timeFilters","allKeys","combinedLists","setCombinedLists","filterDate","time","filter","transaction","date","isSame","sumAmount","order","Object","values","reduce","result","amount","index","format","text","income","expense","console","log","map","timeFilter","height","length","window","innerWidth","marginTop","sort","a","b","list"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useContext } from 'react';\n// import { useTransition, animated } from 'react-spring';\nimport moment from 'moment';\nimport { v4 as id } from 'uuid';\nimport { GlobalContext } from '../context/GlobalState';\nimport { sortAmountAsc } from '../utils/calculation';\nimport Transaction from './common/Transaction';\nimport BarChart from '../components/common/BarChart';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const { loading, transactions, getTransactions } = useContext(GlobalContext);\n  const [value, setValue] = useState(0);\n  const today = moment();\n  const timeFilters = ['week', 'month', 'year'];\n  const allKeys = ['income', 'expense'];\n  const [combinedLists, setCombinedLists] = useState([]);\n\n  const filterDate = (time) => {\n    return transactions.filter((transaction) =>\n      moment(transaction.date).isSame(today, time)\n    );\n  };\n\n  const sumAmount = (time, filter, order) => {\n    return Object.values(\n      filterDate(time).reduce((result, { date, amount }) => {\n        const index = (date) => moment(date).format(order);\n        const format = (date) => moment(date).format(filter);\n\n        !result[format(date)]\n          ? (result[format(date)] = {\n              id: id(),\n              index: +index(date),\n              text: format(date),\n              income: amount > 0 ? amount : 0,\n              expense: amount < 0 ? amount : 0,\n            })\n          : amount > 0\n            ? (result[format(date)].income += amount)\n            : (result[format(date)].expense += amount);\n        \n        return result;\n      }, {})\n    );\n  };\n\n  // eslint-disable-next-line\n  // switch (value) {\n  //   case 0:\n  //     setCombinedLists(sumAmount('week', 'dddd', 'e'));\n  //     break;\n  //   case 1:\n  //     setCombinedLists(sumAmount('month', 'w', 'w'));\n  //     // combinedLists.forEach(list => (list['text'] = 'Week ' + list['text']));\n  //     break;\n  //   case 2:\n  //     setCombinedLists(sumAmount('year', 'MMMM', 'MM'));\n  //     break;\n  // }\n  console.log(combinedLists)\n  // const lists = combinedLists.sort((a, b) => sortAmountAsc(a.index, b.index));\n  // console.log(lists)\n  // const transition = useTransition(lists, list => list.id, {\n  //   from: { height: 75, transform: 'translate3d(-5%,0,0)', opacity: 0 },\n  //   enter: { height: 75, transform: 'translate3d(0%,0,0)', opacity: 1 },\n  //   leave: { height: 0, transform: 'translate3d(-5%,0,0)', opacity: 0 },\n  // });\n\n  useEffect(() => {\n    getTransactions();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Fragment>\n      <div className='plus-bg time-bar'>\n        <Tabs value={value} variant='fullWidth' aria-label='time selectors'>\n          {timeFilters.map((timeFilter, index) => (\n            <Tab\n              key={timeFilter}\n              label={timeFilter}\n              onClick={() => {\n                setValue(index);\n                setCombinedLists(\n                  index === 0 ? sumAmount('week', 'dddd', 'e') :\n                  index === 1 ? sumAmount('month', 'w', 'w') :\n                  sumAmount('year', 'MMMM', 'MM')\n                )\n              }}\n              disableFocusRipple disableRipple\n            />\n          ))}\n        </Tabs>\n      </div>\n\n      <div className='plus-bg box' style={{ height: '250px' }}>\n        <div className='box-incomeExpense'>\n          {combinedLists.length > 0 \n            ? <BarChart\n                data={combinedLists}\n                keys={allKeys}\n                select={value}\n                height='180'\n                width={window.innerWidth > 320 ? 350 : 288}\n              /> \n            : <p className='text-white-s vertical-align'>\n                No transaction\n              </p>\n          }\n        </div>\n      </div>\n\n      <div className='container' style={{ marginTop: 0 }}>\n        {combinedLists.length > 0 ? (\n          <ul className='list'>\n            {combinedLists\n              .sort((a, b) => sortAmountAsc(a.index, b.index))\n              .map(list => (\n                <Transaction key={list.id} transaction={list} />\n              ))}\n          </ul>\n          // <ul className='list'>\n          //   {transition.map(({ item, props, key }) => (\n          //     <animated.div key={key} style={props}>\n          //       <Transaction transaction={item} />\n          //     </animated.div>\n          //   ))}\n          // </ul>\n        ) : (\n          <div className='list-status'>\n            {loading \n              ? (<CircularProgress color='primary' />) \n              : (<p>No transaction of the {timeFilters[value]}</p>)\n            }\n          </div>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Statistics;\n"]},"metadata":{},"sourceType":"module"}