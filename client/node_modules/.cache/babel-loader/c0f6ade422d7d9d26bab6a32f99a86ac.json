{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useState } from 'react';\n\nconst BarChart = ({\n  data: originalData,\n  width,\n  height\n}) => {\n  const [data, setData] = useState([originalData]);\n  const ref = useRef(null); // const cache = useRef(originalData);\n\n  const colors = ['rgba(255, 255, 255, 1)', 'rgba(255, 255, 255, 0.3)'];\n  useEffect(() => {\n    console.log(data); // const data = originalData;\n    // const prevData = createPie(cache.current);\n\n    const labels = data.map(d => d.text);\n    const maxAmount = d3.max(data, d => Math.abs(d.amount));\n    const group = d3.select(ref.current);\n    const scaleY = d3.scaleLinear().domain([0, maxAmount]).range([0, height]);\n    const scaleX = d3.scaleBand().domain(labels).range([0, width]);\n    const xAxis = d3.axisBottom(scaleX); // group.append('g').call(xAxis);\n\n    const groupWithData = group.selectAll('.rect').data(data);\n    console.log(groupWithData);\n    groupWithData.exit().remove();\n    const groupWithUpdate = groupWithData.enter().append('g').attr('class', 'rect');\n    const rect = groupWithUpdate.append('rect').merge(groupWithData.select('rect'));\n    rect.attr('width', 6).attr('height', d => scaleY(Math.abs(d.amount))).attr('fill', d => d.amount < 0 ? colors[0] : colors[1]).attr('x', d => scaleX.bandwidth() / 2 - 3 + scaleX(d.text)).attr('y', d => height - scaleY(Math.abs(d.amount))); // eslint-disable-next-line\n  }, [originalData]);\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    ref: ref,\n    style: {\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx"],"names":["React","useEffect","useRef","d3","useState","BarChart","data","originalData","width","height","setData","ref","colors","console","log","labels","map","d","text","maxAmount","max","Math","abs","amount","group","select","current","scaleY","scaleLinear","domain","range","scaleX","scaleBand","xAxis","axisBottom","groupWithData","selectAll","exit","remove","groupWithUpdate","enter","append","attr","rect","merge","bandwidth","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { useState } from 'react';\n\nconst BarChart = ({ data : originalData, width, height }) => {\n  const [data, setData] = useState([originalData]);\n  const ref = useRef(null);\n  // const cache = useRef(originalData);\n\n  const colors = [\n    'rgba(255, 255, 255, 1)',\n    'rgba(255, 255, 255, 0.3)'\n  ];\n\n  useEffect(() => {\n    console.log(data)\n    // const data = originalData;\n    // const prevData = createPie(cache.current);\n    const labels = data.map(d => d.text);\n    const maxAmount = d3.max(data, d => Math.abs(d.amount));\n    const group = d3.select(ref.current);\n\n    const scaleY = d3\n      .scaleLinear()\n      .domain([0, maxAmount])\n      .range([0, height]);\n\n    const scaleX = d3\n      .scaleBand()\n      .domain(labels)\n      .range([0, width]);\n    \n    const xAxis = d3.axisBottom(scaleX);\n    // group.append('g').call(xAxis);\n\n    const groupWithData = group\n      .selectAll('.rect')\n      .data(data);\n    console.log(groupWithData)\n    groupWithData\n      .exit()\n      .remove();\n    \n    const groupWithUpdate = groupWithData\n      .enter()\n      .append('g')\n      .attr('class', 'rect')\n\n    const rect = groupWithUpdate\n      .append('rect')\n      .merge(groupWithData.select('rect'));\n\n    rect\n      .attr('width', 6)\n      .attr('height', d => scaleY(Math.abs(d.amount)))\n      .attr('fill', d => d.amount < 0 ? colors[0] : colors[1])\n      .attr('x', d => scaleX.bandwidth() / 2 - 3 + scaleX(d.text))\n      .attr('y', d => height - scaleY(Math.abs(d.amount)));\n\n  // eslint-disable-next-line\n  }, [originalData])\n\n  return ( \n    <svg \n      width={width} \n      height={height} \n      ref={ref}\n      style={{ margin: 'auto' }}\n    />\n  );\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}