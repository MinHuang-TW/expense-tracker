{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/TransactionList.jsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { formatDate, sortAmountDsc, sortAmountAsc, dbDateArr, newDateArr } from '../utils/format';\nimport TransactionFilter from './common/TransactionFilter';\nimport Transaction from './Transaction';\nimport { CircularProgress } from '@material-ui/core';\n\nconst TransactionList = () => {\n  const {\n    loading,\n    transactions,\n    getTransactions\n  } = useContext(GlobalContext);\n  const [sortDsc, setSortDsc] = useState(true);\n  const date = newDateArr(new Date());\n  let counter = 0;\n  useEffect(() => {\n    getTransactions(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(TransactionFilter, {\n    value: 0,\n    sortDsc: sortDsc,\n    handleSortAmount: () => setSortDsc(!sortDsc),\n    text: `today : ${formatDate(new Date())}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), transactions.length > 0 ? React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, transactions.filter(transaction => {\n    const data = dbDateArr(transaction.date);\n    return data[2] === date[2] && data[1] === date[1] && data[0] === date[0];\n  }).sort((a, b) => sortDsc ? sortAmountDsc(a, b) : sortAmountAsc(a, b)).map(transaction => {\n    counter++;\n    return React.createElement(Transaction, {\n      key: transaction._id,\n      transaction: transaction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }), counter === 0 && React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"No transaction today\")) : React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, loading ? React.createElement(CircularProgress, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Add your first transaction\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), \"by clicking the green plus button\")));\n};\n\nexport default TransactionList;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/TransactionList.jsx"],"names":["React","useState","useContext","useEffect","GlobalContext","formatDate","sortAmountDsc","sortAmountAsc","dbDateArr","newDateArr","TransactionFilter","Transaction","CircularProgress","TransactionList","loading","transactions","getTransactions","sortDsc","setSortDsc","date","Date","counter","length","filter","transaction","data","sort","a","b","map","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,aAApC,EAAmDC,SAAnD,EAA8DC,UAA9D,QAAgF,iBAAhF;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAA6Cd,UAAU,CAACE,aAAD,CAA7D;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAMkB,IAAI,GAAGV,UAAU,CAAC,IAAIW,IAAJ,EAAD,CAAvB;AACA,MAAIC,OAAO,GAAG,CAAd;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,eAAe,GADD,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CADT;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,gBAAgB,EAAE,MAAMC,UAAU,CAAC,CAACD,OAAF,CAHpC;AAIE,IAAA,IAAI,EAAG,WAAUZ,UAAU,CAAC,IAAIe,IAAJ,EAAD,CAAa,EAJ1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQGL,YAAY,CAACO,MAAb,GAAsB,CAAtB,GACC;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,YAAY,CACVQ,MADF,CACSC,WAAW,IAAI;AACnB,UAAMC,IAAI,GAAGjB,SAAS,CAACgB,WAAW,CAACL,IAAb,CAAtB;AACA,WAAQM,IAAI,CAAC,CAAD,CAAJ,KAAYN,IAAI,CAAC,CAAD,CAAhB,IACHM,IAAI,CAAC,CAAD,CAAJ,KAAYN,IAAI,CAAC,CAAD,CADb,IAEHM,IAAI,CAAC,CAAD,CAAJ,KAAYN,IAAI,CAAC,CAAD,CAFrB;AAID,GAPJ,EAQEO,IARF,CAQO,CAACC,CAAD,EAAIC,CAAJ,KAAUX,OAAO,GAAGX,aAAa,CAACqB,CAAD,EAAIC,CAAJ,CAAhB,GAAyBrB,aAAa,CAACoB,CAAD,EAAIC,CAAJ,CAR9D,EASEC,GATF,CASML,WAAW,IAAI;AAClBH,IAAAA,OAAO;AACP,WACE,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEG,WAAW,CAACM,GAA9B;AAAmC,MAAA,WAAW,EAAEN,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAdF,CADH,EAgBGH,OAAO,KAAK,CAAZ,IACC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAjBJ,CADD,GAsBC;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,OAAO,GACJ,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADI,GAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD5B,sCAHN,CA9BJ,CADF;AA2CD,CAvDD;;AAyDA,eAAeD,eAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\nimport { formatDate, sortAmountDsc, sortAmountAsc, dbDateArr, newDateArr } from '../utils/format';\nimport TransactionFilter from './common/TransactionFilter';\nimport Transaction from './Transaction';\nimport { CircularProgress } from '@material-ui/core';\n\nconst TransactionList = () => {\n  const { loading, transactions, getTransactions } = useContext(GlobalContext);\n  const [sortDsc, setSortDsc] = useState(true);\n\n  const date = newDateArr(new Date());\n  let counter = 0;\n\n  useEffect(() => {\n    getTransactions();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className='container'>\n      <TransactionFilter \n        value={0} \n        sortDsc={sortDsc} \n        handleSortAmount={() => setSortDsc(!sortDsc)}\n        text={`today : ${formatDate(new Date())}`}\n      />\n\n      {transactions.length > 0 ? (\n        <ul className='list'>\n          {transactions\n            .filter(transaction => {\n                const data = dbDateArr(transaction.date);\n                return (data[2] === date[2] \n                  && data[1] === date[1] \n                  && data[0] === date[0]\n                );\n              })\n            .sort((a, b) => sortDsc ? sortAmountDsc(a, b) : sortAmountAsc(a, b))\n            .map(transaction => {\n              counter++;\n              return (\n                <Transaction key={transaction._id} transaction={transaction} />\n              );\n            })}\n          {counter === 0 && (\n            <div className='list-status'>No transaction today</div>\n          )}\n        </ul>\n      ) : (\n        <div className='list-status'>\n          {loading \n            ? <CircularProgress color='primary'/>\n            : <span>\n                Add your first transaction<br/>\n                by clicking the green plus button\n              </span>\n          }\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TransactionList;\n"]},"metadata":{},"sourceType":"module"}