{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx\";\nimport React, { Fragment, useState, useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { GlobalContext } from '../context/GlobalState';\nimport { checkWeek, checkMonth, checkYear } from '../utils/calculation';\nimport Transaction from './Transaction';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const {\n    loading,\n    transactions,\n    getTransactions\n  } = useContext(GlobalContext);\n  const [value, setValue] = useState(0); // const [selected, setSelected] = useState('all');\n  // const [sortLatest, setSortLatest] = useState(true);\n  // const [sortDsc, setSortDsc] = useState(true);\n\n  const timeFilters = ['week', 'month', 'year'];\n  const filterLists = [{\n    value: 0,\n    time: 'week',\n    filter: 'dddd'\n  }, {\n    value: 1,\n    time: 'month',\n    filter: 'ww'\n  }, {\n    value: 2,\n    time: 'year',\n    filter: 'MMMM'\n  }];\n  const today = moment();\n  const incomeLists = [];\n  const expenseLists = [];\n  let counter = 0;\n\n  const income = (time, filter) => {\n    const temp = {};\n    transactions.filter(transaction => transaction.amount > 0).filter(transaction => moment(transaction.date).isSame(today, time)).map(transaction => {\n      const date = moment(transaction.date).format(filter);\n\n      if (transaction.amount > 0) {\n        temp.hasOwnProperty(date) ? temp[date] += transaction.amount : temp[date] = transaction.amount;\n      }\n    });\n    Object.entries(temp).forEach(([key, value], index) => {\n      incomeLists.push({\n        '_id': index,\n        'text': `${key}`,\n        'amount': `${value}`\n      });\n    });\n  };\n\n  const expense = (time, filter) => {\n    const temp = {};\n    transactions.filter(transaction => transaction.amount < 0).filter(transaction => moment(transaction.date).isSame(today, time)).map(transaction => {\n      const date = moment(transaction.date).format(filter);\n\n      if (temp.hasOwnProperty(date)) {\n        return temp[date] += transaction.amount;\n      } else {\n        return temp[date] = transaction.amount;\n      }\n    });\n    Object.entries(temp).forEach(([key, value], index) => {\n      expenseLists.push({\n        '_id': index,\n        'text': `${key}`,\n        'amount': `${value}`\n      });\n    });\n  };\n\n  useEffect(() => {\n    getTransactions(); // eslint-disable-next-line\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"plus-bg time-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Tabs, {\n    value: value,\n    variant: \"fullWidth\",\n    \"aria-label\": \"time selectors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, timeFilters.map((timeFilter, index) => React.createElement(Tab, {\n    key: timeFilter,\n    label: timeFilter,\n    onClick: () => setValue(index),\n    disableFocusRipple: true,\n    disableRipple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"plus-bg box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container box-incomeExpense\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, transactions.length > 0 ? React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, filterLists.map(list => {\n    if (value === list.value) {\n      expense(list.time, list.filter);\n      income(list.time, list.filter);\n    }\n\n    return React.createElement(React.Fragment, null, incomeLists.map(list => React.createElement(Transaction, {\n      key: list._id,\n      transaction: list,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }), counter === 0 && React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"of this \", timeFilters[value])) : React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, loading ? React.createElement(CircularProgress, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }) : 'No transaction')));\n};\n\nexport default Statistics;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx"],"names":["React","Fragment","useState","useEffect","useContext","moment","GlobalContext","checkWeek","checkMonth","checkYear","Transaction","Tabs","Tab","CircularProgress","Statistics","loading","transactions","getTransactions","value","setValue","timeFilters","filterLists","time","filter","today","incomeLists","expenseLists","counter","income","temp","transaction","amount","date","isSame","map","format","hasOwnProperty","Object","entries","forEach","key","index","push","expense","timeFilter","length","list","_id"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { GlobalContext } from '../context/GlobalState';\nimport { checkWeek, checkMonth, checkYear } from '../utils/calculation';\nimport Transaction from './Transaction';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const { loading, transactions, getTransactions } = useContext(GlobalContext);\n  const [value, setValue] = useState(0);\n  // const [selected, setSelected] = useState('all');\n  // const [sortLatest, setSortLatest] = useState(true);\n  // const [sortDsc, setSortDsc] = useState(true);\n\n  const timeFilters = ['week', 'month', 'year'];\n  const filterLists = [\n    { value: 0, time: 'week', filter: 'dddd'},\n    { value: 1, time: 'month', filter: 'ww'},\n    { value: 2, time: 'year', filter: 'MMMM'},\n  ];\n  \n  const today = moment();\n  const incomeLists = [];\n  const expenseLists = [];\n\n  let counter = 0;\n\n\n  const income = (time, filter) => {\n    const temp = {};\n\n    transactions\n      .filter(transaction => transaction.amount > 0)\n      .filter(transaction => moment(transaction.date).isSame(today, time))\n      .map(transaction => {\n        const date = moment(transaction.date).format(filter);\n        if (transaction.amount > 0) {\n          temp.hasOwnProperty(date) \n            ? temp[date] += transaction.amount\n            : temp[date] = transaction.amount;\n        }\n      })\n\n    Object.entries(temp).forEach(([key, value], index) => {\n      incomeLists.push({ \n        '_id': index, \n        'text': `${key}`, \n        'amount': `${value}` \n      });\n    });\n  }\n\n  const expense = (time, filter) => {\n    const temp = {};\n\n    transactions\n      .filter(transaction => transaction.amount < 0)\n      .filter(transaction => moment(transaction.date).isSame(today, time))\n      .map(transaction => {\n        const date = moment(transaction.date).format(filter);\n        if (temp.hasOwnProperty(date)) {\n          return temp[date] += transaction.amount;\n        } else {\n          return temp[date] = transaction.amount;\n        }\n      })\n\n    Object.entries(temp).forEach(([key, value], index) => {\n      expenseLists.push({ \n        '_id': index, \n        'text': `${key}`, \n        'amount': `${value}` \n      });\n    });\n  }\n\n  useEffect(() => {\n    getTransactions();\n    // eslint-disable-next-line\n  }, []);\n\n  return ( \n    <Fragment>\n      <div className='plus-bg time-bar'>\n        <Tabs value={value} variant=\"fullWidth\" aria-label=\"time selectors\">\n          {timeFilters.map((timeFilter, index) => \n            <Tab \n              key={timeFilter} label={timeFilter} \n              onClick={() => setValue(index)} \n              disableFocusRipple disableRipple\n            />\n          )}\n        </Tabs>\n      </div>\n\n      <div className='plus-bg box'>\n        <div className='container box-incomeExpense'>\n\n        </div>\n      </div>\n\n      <div className=\"container\">\n        {transactions.length > 0 ? (\n          <ul className='list'>\n            {filterLists.map(list => {\n              if (value === list.value) {\n                expense(list.time, list.filter);\n                income(list.time, list.filter);\n              }\n              return (\n                <>\n                  {incomeLists.map(list => \n                    <Transaction key={list._id} transaction={list} />\n                  )}\n                </>\n              )\n            })\n            }\n            {/* {console.log(incomeLists)} */}\n            {/* {console.log(newList)} */}\n\n            {/* {newList.map(e => <Transaction transaction={e} />)} */}\n\n            {counter === 0 && (\n              <div className='list-status'>\n                {/* No {selected !== 'all' && selected} transaction<br/> */}\n                of this {timeFilters[value]}\n              </div>\n            )}\n          </ul>\n        ) : (\n          <div className='list-status'>\n            {loading \n              ? <CircularProgress color='primary'/>\n              : 'No transaction'}\n          </div>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}