{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx\";\nimport React, { Fragment, useState, useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { GlobalContext } from '../context/GlobalState';\nimport Transaction from './Transaction';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const {\n    loading,\n    transactions,\n    getTransactions\n  } = useContext(GlobalContext);\n  const [value, setValue] = useState(0);\n  const timeFilters = ['week', 'month', 'year'];\n  const incomeLists = [];\n  const expenseLists = [];\n  const today = moment();\n\n  const sortDate = (transactions, time, filter) => {\n    const temp = {};\n    transactions.filter(transaction => moment(transaction.date).isSame(today, time)).map(transaction => {\n      const date = moment(transaction.date).format(filter);\n      return temp.hasOwnProperty(date) ? temp[date] += transaction.amount : temp[date] = transaction.amount;\n    });\n    Object.entries(temp).forEach(([key, value]) => {\n      incomeLists.push({\n        'text': `${key}`,\n        'amount': `${value}`\n      });\n    });\n  };\n\n  transactions.filter(t => t.amount > 0 ? sortDate(t, 'year', 'MMMM') : sortDate(t, 'year', 'MMMM'));\n  console.log(incomeLists); // const income = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount > 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     incomeLists.push({ 'text': `${key}`, 'amount': `${value}` });\n  //   });\n  // }\n  // const expense = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount < 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     expenseLists.push({ 'text': `${key}`, 'amount': `${value}` });\n  //   });\n  // }\n  // if (value === 0) {\n  //   expense('week', 'e'); income('week', 'e');\n  // } else if (value === 1) {\n  //   expense('month', 'w'); income('month', 'w');\n  // } else if (value === 2) {\n  //   expense('year', 'MM'); income('year', 'MM');\n  // };\n\n  useEffect(() => {\n    getTransactions(); // eslint-disable-next-line\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"plus-bg time-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Tabs, {\n    value: value,\n    variant: \"fullWidth\",\n    \"aria-label\": \"time selectors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, timeFilters.map((timeFilter, index) => React.createElement(Tab, {\n    key: timeFilter,\n    label: timeFilter,\n    onClick: () => setValue(index),\n    disableFocusRipple: true,\n    disableRipple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"plus-bg box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container box-incomeExpense\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, transactions.length > 0 ? React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, loading ? React.createElement(CircularProgress, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }) : 'No transaction')));\n};\n\nexport default Statistics;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx"],"names":["React","Fragment","useState","useEffect","useContext","moment","GlobalContext","Transaction","Tabs","Tab","CircularProgress","Statistics","loading","transactions","getTransactions","value","setValue","timeFilters","incomeLists","expenseLists","today","sortDate","time","filter","temp","transaction","date","isSame","map","format","hasOwnProperty","amount","Object","entries","forEach","key","push","t","console","log","timeFilter","index","length"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { GlobalContext } from '../context/GlobalState';\nimport Transaction from './Transaction';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const { loading, transactions, getTransactions } = useContext(GlobalContext);\n  const [value, setValue] = useState(0);\n  const timeFilters = ['week', 'month', 'year'];\n  const incomeLists = [];\n  const expenseLists = [];\n  const today = moment();\n\n  const sortDate = (transactions, time, filter) => {\n    const temp = {};\n    transactions\n      .filter(transaction => moment(transaction.date).isSame(today, time))\n      .map(transaction => {\n        const date = moment(transaction.date).format(filter);\n        return temp.hasOwnProperty(date) \n          ? temp[date] += transaction.amount\n          : temp[date] = transaction.amount;\n      })\n    Object.entries(temp).forEach(([key, value]) => {\n      incomeLists.push({ 'text': `${key}`, 'amount': `${value}` });\n    });\n  }\n  transactions.filter(t => t.amount > 0 \n    ? sortDate(t, 'year', 'MMMM') \n    : sortDate(t, 'year', 'MMMM'))\n\n  console.log(incomeLists)\n\n\n  // const income = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount > 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     incomeLists.push({ 'text': `${key}`, 'amount': `${value}` });\n  //   });\n  // }\n\n  // const expense = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount < 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     expenseLists.push({ 'text': `${key}`, 'amount': `${value}` });\n  //   });\n  // }\n\n  // if (value === 0) {\n  //   expense('week', 'e'); income('week', 'e');\n  // } else if (value === 1) {\n  //   expense('month', 'w'); income('month', 'w');\n  // } else if (value === 2) {\n  //   expense('year', 'MM'); income('year', 'MM');\n  // };\n\n  useEffect(() => {\n    getTransactions();\n    // eslint-disable-next-line\n  }, []);\n\n  return ( \n    <Fragment>\n      <div className='plus-bg time-bar'>\n        <Tabs value={value} variant=\"fullWidth\" aria-label=\"time selectors\">\n          {timeFilters.map((timeFilter, index) => \n            <Tab \n              key={timeFilter} label={timeFilter} \n              onClick={() => setValue(index)} \n              disableFocusRipple disableRipple\n            />\n          )}\n        </Tabs>\n      </div>\n\n      <div className='plus-bg box'>\n        <div className='container box-incomeExpense'>\n\n        </div>\n      </div>\n\n      <div className=\"container\">\n        {transactions.length > 0 ? (\n          <ul className='list'>\n            {/* {incomeLists.concat(expenseLists)\n              .sort((a, b) => a.text < b.text ?  -1 : 1)\n              .map((list, index) => {\n                if (value === 0) {\n                  list.text = moment().day(list.text).format('dddd');\n                }\n                if (value === 1) {\n                  list.text = `${moment().day(0).week(list.text).format('D MMM')} \n                    - ${moment().day(6).week(list.text).format('D MMM')}`;\n                }\n                if (value === 2) {\n                  list.text = moment().month(list.text - 1).format('MMMM');\n                }\n\n                return <Transaction key={index} transaction={list} />\n              })\n            } */}\n\n            {/* {expenseLists === 0 && (\n              <div className='list-status'>\n                No transaction<br/>\n                of the {timeFilters[value]}\n              </div>\n            )} */}\n          </ul>\n        ) : (\n          <div className='list-status'>\n            {loading \n              ? <CircularProgress color='primary'/>\n              : 'No transaction'}\n          </div>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}