{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx\";\nimport React, { Fragment, useState, useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { GlobalContext } from '../context/GlobalState';\nimport Transaction from './Transaction';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const {\n    loading,\n    transactions,\n    getTransactions\n  } = useContext(GlobalContext);\n  const [value, setValue] = useState(0);\n  const timeFilters = ['week', 'month', 'year'];\n  const incomeLists = [];\n  const expenseLists = [];\n  const today = moment();\n\n  const sortDate = (type, time) => {\n    return transactions.filter(transaction => moment(transaction.date).isSame(today, time)).filter(transaction => {\n      if (type === 'expense') return transaction.amount < 0;\n      if (type === 'income') return transaction.amount > 0;\n      if (type === 'all') return transaction.amount;\n      return transaction.amount;\n    });\n  };\n\n  const sumAmount = (type, time, filter, order) => {\n    return Object.values(sortDate(type, time).reduce((result, {\n      date,\n      amount\n    }) => {\n      const index = date => moment(date).format(order);\n\n      const format = date => moment(date).format(filter);\n\n      !result[format(date)] ? result[format(date)] = {\n        index: +index(date),\n        text: format(date),\n        amount\n      } : result[format(date)].amount += amount;\n      return result;\n    }, {}));\n  };\n\n  const lists = [{\n    'income': incomeLists\n  }, {\n    'expense': expenseLists\n  }];\n\n  if (value === 0) {\n    lists.map(list => list[key].push(...sumAmount(key, 'week', 'dddd', 'e'))); // incomeLists.push(...sumAmount('income', 'week', 'dddd', 'e'));\n    // expenseLists.push(...sumAmount('expense', 'week', 'dddd', 'e'));\n  } else if (value === 1) {\n    // `${moment().day(0).week(list.text).format('D MMM')} \n    // - ${moment().day(6).week(list.text).format('D MMM')}`\n    incomeLists.push(...sumAmount('income', 'month', 'D MMM', 'w'));\n    expenseLists.push(...sumAmount('expense', 'month', 'D MMM', 'w'));\n  } else if (value === 2) {\n    incomeLists.push(...sumAmount('income', 'year', 'MMMM', 'MM'));\n    expenseLists.push(...sumAmount('expense', 'year', 'MMMM', 'MM'));\n  }\n\n  ; // const income = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount > 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     incomeLists.push({ 'text': key, 'amount': value });\n  //   });\n  // }\n  // const expense = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount < 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     expenseLists.push({ 'text': key, 'amount': value });\n  //   });\n  // }\n  // if (value === 0) {\n  //   expense('week', 'e'); income('week', 'e');\n  // } else if (value === 1) {\n  //   expense('month', 'w'); income('month', 'w');\n  // } else if (value === 2) {\n  //   expense('year', 'MM'); income('year', 'MM');\n  // };\n\n  useEffect(() => {\n    getTransactions(); // eslint-disable-next-line\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"plus-bg time-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Tabs, {\n    value: value,\n    variant: \"fullWidth\",\n    \"aria-label\": \"time selectors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, timeFilters.map((timeFilter, index) => React.createElement(Tab, {\n    key: timeFilter,\n    label: timeFilter,\n    onClick: () => setValue(index),\n    disableFocusRipple: true,\n    disableRipple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"plus-bg box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container box-incomeExpense\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, transactions.length > 0 ? React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, incomeLists.concat(expenseLists).sort((a, b) => a.index < b.index ? -1 : 1).map((list, index) => {\n    console.log(list);\n    return React.createElement(Transaction, {\n      key: index,\n      transaction: list,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    });\n  })) : React.createElement(\"div\", {\n    className: \"list-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, loading ? React.createElement(CircularProgress, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }) : 'No transaction')));\n};\n\nexport default Statistics;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/Statistics.jsx"],"names":["React","Fragment","useState","useEffect","useContext","moment","GlobalContext","Transaction","Tabs","Tab","CircularProgress","Statistics","loading","transactions","getTransactions","value","setValue","timeFilters","incomeLists","expenseLists","today","sortDate","type","time","filter","transaction","date","isSame","amount","sumAmount","order","Object","values","reduce","result","index","format","text","lists","map","list","key","push","timeFilter","length","concat","sort","a","b","console","log"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { GlobalContext } from '../context/GlobalState';\nimport Transaction from './Transaction';\nimport { Tabs, Tab, CircularProgress } from '@material-ui/core';\n\nconst Statistics = () => {\n  const { loading, transactions, getTransactions } = useContext(GlobalContext);\n  const [value, setValue] = useState(0);\n  const timeFilters = ['week', 'month', 'year'];\n  const incomeLists = [];\n  const expenseLists = [];\n  const today = moment();\n\n  const sortDate = (type, time) => {\n    return (transactions\n      .filter(transaction => moment(transaction.date).isSame(today, time))\n      .filter(transaction => {\n        if (type === 'expense') return transaction.amount < 0;\n        if (type === 'income') return transaction.amount > 0;\n        if (type === 'all') return transaction.amount;\n        return transaction.amount;\n      })\n    );\n  }\n\n  const sumAmount = (type, time, filter, order) => {\n    return Object.values(sortDate(type, time)\n      .reduce((result, { date, amount }) => {\n        const index = date => moment(date).format(order);\n        const format = date => moment(date).format(filter);\n\n        !result[format(date)] \n          ? (result[format(date)] = { index: +index(date), text: format(date), amount }) \n          : (result[format(date)].amount += amount)\n\n        return result;\n    }, {})\n  )}\n\n  const lists = [{ 'income' : incomeLists }, { 'expense': expenseLists }];\n\n  if (value === 0) {\n    lists.map(list => \n      list[key].push(...sumAmount(key,'week', 'dddd', 'e' ))\n    )\n    // incomeLists.push(...sumAmount('income', 'week', 'dddd', 'e'));\n    // expenseLists.push(...sumAmount('expense', 'week', 'dddd', 'e'));\n\n  } else if (value === 1) {\n    // `${moment().day(0).week(list.text).format('D MMM')} \n    // - ${moment().day(6).week(list.text).format('D MMM')}`\n    \n    incomeLists.push(...sumAmount('income', 'month', 'D MMM', 'w'));\n    expenseLists.push(...sumAmount('expense', 'month', 'D MMM', 'w'));\n\n  } else if (value === 2) {\n    incomeLists.push(...sumAmount('income', 'year', 'MMMM', 'MM'));\n    expenseLists.push(...sumAmount('expense', 'year', 'MMMM', 'MM'));\n  };\n\n  // const income = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount > 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     incomeLists.push({ 'text': key, 'amount': value });\n  //   });\n  // }\n\n  // const expense = (time, filter) => {\n  //   const temp = {};\n  //   transactions\n  //     .filter(transaction => transaction.amount < 0)\n  //     .filter(transaction => moment(transaction.date).isSame(today, time))\n  //     .map(transaction => {\n  //       const date = moment(transaction.date).format(filter);\n  //       return temp.hasOwnProperty(date) \n  //         ? temp[date] += transaction.amount\n  //         : temp[date] = transaction.amount;\n  //     })\n  //   Object.entries(temp).forEach(([key, value]) => {\n  //     expenseLists.push({ 'text': key, 'amount': value });\n  //   });\n  // }\n\n  // if (value === 0) {\n  //   expense('week', 'e'); income('week', 'e');\n  // } else if (value === 1) {\n  //   expense('month', 'w'); income('month', 'w');\n  // } else if (value === 2) {\n  //   expense('year', 'MM'); income('year', 'MM');\n  // };\n\n  useEffect(() => {\n    getTransactions();\n    // eslint-disable-next-line\n  }, []);\n\n  return ( \n    <Fragment>\n      <div className='plus-bg time-bar'>\n        <Tabs value={value} variant=\"fullWidth\" aria-label=\"time selectors\">\n          {timeFilters.map((timeFilter, index) => \n            <Tab \n              key={timeFilter} label={timeFilter} \n              onClick={() => setValue(index)} \n              disableFocusRipple disableRipple\n            />\n          )}\n        </Tabs>\n      </div>\n\n      <div className='plus-bg box'>\n        <div className='container box-incomeExpense'>\n\n        </div>\n      </div>\n\n      <div className=\"container\">\n        {transactions.length > 0 ? (\n          <ul className='list'>\n            {incomeLists.concat(expenseLists)\n              .sort((a, b) => a.index < b.index ?  -1 : 1)\n              .map((list, index) => {\n                console.log(list)\n                return <Transaction key={index} transaction={list} />\n              })\n            }\n            {/* {incomeLists.concat(expenseLists)\n              .sort((a, b) => a.text < b.text ?  -1 : 1)\n              .map((list, index) => {\n                if (value === 0) {\n                  list.text = moment().day(list.text).format('dddd');\n                }\n                if (value === 1) {\n                  list.text = `${moment().day(0).week(list.text).format('D MMM')} - ${moment().day(6).week(list.text).format('D MMM')}`;\n                }\n                if (value === 2) {\n                  list.text = moment().month(list.text - 1).format('MMMM');\n                }\n\n                return <Transaction key={index} transaction={list} />\n              })\n            } */}\n\n            {/* {expenseLists === 0 && (\n              <div className='list-status'>\n                No transaction<br/>\n                of the {timeFilters[value]}\n              </div>\n            )} */}\n          </ul>\n        ) : (\n          <div className='list-status'>\n            {loading \n              ? <CircularProgress color='primary'/>\n              : 'No transaction'}\n          </div>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}