{"ast":null,"code":"var _jsxFileName = \"/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst BarChart = ({\n  data: originalData,\n  width,\n  height\n}) => {\n  const ref = useRef(null); // const cache = useRef(originalData);\n\n  const colors = ['rgba(255, 255, 255, 1)', 'rgba(255, 255, 255, 0.3)'];\n  useEffect(() => {\n    const data = originalData;\n    const labels = originalData.map(d => d.text); // const prevData = createPie(cache.current);\n\n    const group = d3.select(ref.current);\n    const scaleY = d3.scaleLinear().domain([0, Math.max(...data)]).range([0, height]);\n    const scaleX = d3.scaleBand().domain(labels).range([0, width]);\n    const groupWithData = group.selectAll('g.rect').data(data.map(d => Math.abs(d.amount)));\n    groupWithData.exit().remove();\n    const groupWithUpdate = groupWithData.enter().append('g').attr('class', 'rect').merge(groupWithData.select('rect'));\n    groupWithUpdate.append('rect').attr('width', 6).attr('height', d => scaleY(d)).attr('fill', d => colors[0]).attr('x', (d, i) => i * 18).attr('y', d => height - scaleY(d)); // const path = groupWithUpdate\n    //   .append('path')\n    //   .merge(groupWithData.select('path.arc'));\n    // path\n    //   .attr('class', 'arc')\n    //   .attr('d', createArc)\n    //   .attr('fill', (d, i) => colors[i])\n    //   .transition()\n    //   .duration(750)\n    //   .attrTween('d', arcTween);\n    // eslint-disable-next-line\n  }, [originalData]);\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    ref: ref // transform={`translate(${width / 2} ${height / 2})`} \n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/Min/Desktop/expense-tracker/client/src/components/common/BarChart.jsx"],"names":["React","useEffect","useRef","d3","BarChart","data","originalData","width","height","ref","colors","labels","map","d","text","group","select","current","scaleY","scaleLinear","domain","Math","max","range","scaleX","scaleBand","groupWithData","selectAll","abs","amount","exit","remove","groupWithUpdate","enter","append","attr","merge","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAGC,YAAT;AAAuBC,EAAAA,KAAvB;AAA8BC,EAAAA;AAA9B,CAAD,KAA4C;AAC3D,QAAMC,GAAG,GAAGP,MAAM,CAAC,IAAD,CAAlB,CAD2D,CAE3D;;AAEA,QAAMQ,MAAM,GAAG,CACb,wBADa,EAEb,0BAFa,CAAf;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMI,IAAI,GAAGC,YAAb;AACA,UAAMK,MAAM,GAAGL,YAAY,CAACM,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAACC,IAAxB,CAAf,CAFc,CAGd;;AACA,UAAMC,KAAK,GAAGZ,EAAE,CAACa,MAAH,CAAUP,GAAG,CAACQ,OAAd,CAAd;AAEA,UAAMC,MAAM,GAAGf,EAAE,CACdgB,WADY,GAEZC,MAFY,CAEL,CAAC,CAAD,EAAIC,IAAI,CAACC,GAAL,CAAS,GAAGjB,IAAZ,CAAJ,CAFK,EAGZkB,KAHY,CAGN,CAAC,CAAD,EAAIf,MAAJ,CAHM,CAAf;AAKA,UAAMgB,MAAM,GAAGrB,EAAE,CACdsB,SADY,GAEZL,MAFY,CAELT,MAFK,EAGZY,KAHY,CAGN,CAAC,CAAD,EAAIhB,KAAJ,CAHM,CAAf;AAKA,UAAMmB,aAAa,GAAGX,KAAK,CACxBY,SADmB,CACT,QADS,EAEnBtB,IAFmB,CAEdA,IAAI,CAACO,GAAL,CAASC,CAAC,IAAIQ,IAAI,CAACO,GAAL,CAASf,CAAC,CAACgB,MAAX,CAAd,CAFc,CAAtB;AAIAH,IAAAA,aAAa,CAACI,IAAd,GAAqBC,MAArB;AAEA,UAAMC,eAAe,GAAGN,aAAa,CAClCO,KADqB,GAErBC,MAFqB,CAEd,GAFc,EAGrBC,IAHqB,CAGhB,OAHgB,EAGP,MAHO,EAIrBC,KAJqB,CAIfV,aAAa,CAACV,MAAd,CAAqB,MAArB,CAJe,CAAxB;AAMAgB,IAAAA,eAAe,CACZE,MADH,CACU,MADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,CAFjB,EAGGA,IAHH,CAGQ,QAHR,EAGkBtB,CAAC,IAAIK,MAAM,CAACL,CAAD,CAH7B,EAIGsB,IAJH,CAIQ,MAJR,EAIgBtB,CAAC,IAAIH,MAAM,CAAC,CAAD,CAJ3B,EAKGyB,IALH,CAKQ,GALR,EAKa,CAACtB,CAAD,EAAIwB,CAAJ,KAAUA,CAAC,GAAG,EAL3B,EAMGF,IANH,CAMQ,GANR,EAMatB,CAAC,IAAIL,MAAM,GAAGU,MAAM,CAACL,CAAD,CANjC,EA5Bc,CAoCd;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACC,GAjDQ,EAiDN,CAACP,YAAD,CAjDM,CAAT;AAmDA,SACE;AAAK,IAAA,KAAK,EAAEC,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEC,GADP,CAEE;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CApED;;AAsEA,eAAeL,QAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst BarChart = ({ data : originalData, width, height }) => {\n  const ref = useRef(null);\n  // const cache = useRef(originalData);\n\n  const colors = [\n    'rgba(255, 255, 255, 1)',\n    'rgba(255, 255, 255, 0.3)'\n  ];\n\n  useEffect(() => {\n    const data = originalData;\n    const labels = originalData.map(d => d.text);\n    // const prevData = createPie(cache.current);\n    const group = d3.select(ref.current);\n\n    const scaleY = d3\n      .scaleLinear()\n      .domain([0, Math.max(...data)])\n      .range([0, height])\n\n    const scaleX = d3\n      .scaleBand()\n      .domain(labels)\n      .range([0, width])\n\n    const groupWithData = group\n      .selectAll('g.rect')\n      .data(data.map(d => Math.abs(d.amount)));\n\n    groupWithData.exit().remove();\n\n    const groupWithUpdate = groupWithData\n      .enter()\n      .append('g')\n      .attr('class', 'rect')\n      .merge(groupWithData.select('rect'));\n\n    groupWithUpdate\n      .append('rect')\n      .attr('width', 6)\n      .attr('height', d => scaleY(d))\n      .attr('fill', d => colors[0])\n      .attr('x', (d, i) => i * 18)\n      .attr('y', d => height - scaleY(d));\n\n    // const path = groupWithUpdate\n    //   .append('path')\n    //   .merge(groupWithData.select('path.arc'));\n\n    // path\n    //   .attr('class', 'arc')\n    //   .attr('d', createArc)\n    //   .attr('fill', (d, i) => colors[i])\n    //   .transition()\n    //   .duration(750)\n    //   .attrTween('d', arcTween);\n\n  // eslint-disable-next-line\n  }, [originalData])\n\n  return ( \n    <svg width={width} height={height}>\n      <g \n        ref={ref} \n        // transform={`translate(${width / 2} ${height / 2})`} \n      />\n    </svg>\n  );\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}